Mis apuntes - mas importante

Funcionamiento del Proceso de renderizado del motor del navegador

    Note: El motor del navegador realiza 5 pasos o procesos para compilar nuestro código
    hasta el renderizado por pantalla. Estos pasos son los siguientes:

        1-) Transforma los archivos a un árbol de objetos HTML o CSS, estos se denominan
            DOM (Document Object Model) y CSSDOM (Cascade Style Sheet Object Model),
            respectivamente. Cada nodo en el árbol es una representación de los elementos
            que contiene el archivo HTML o CSS.

        2-) Calcula el estilo correspondiente a cada nodo del DOM relacionado al CSSDOM.

        3-) Calcula las dimensiones de cada nodo y dónde va en la pantalla.

        4-) Pinta o renderiza los diferentes elementos como cajas o contenedores.

        5-) Agrupa todas las cajas en diferentes capas para convertirlas en una imagen
            que se renderiza en pantalla.

//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//
//-----//-----// Anatomía de un documento HTML y sus elementos 4/23 //-----//-----//
//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//

    Los elementos son cada una de las partes que conforman un archivo HTML.
    Su estructura contiene:

        Etiquetas: es la representación de un elemento HTML.
            Se dividen en etiquetas de apertura, representadas por <etiqueta> y etiquetas
            de cierre, representadas por </etiqueta>.
        
        Contenido: es el texto o elementos encerrados por la etiqueta, este valor es opcional
            en algunas de ellas.
    
        Example:

            etiqueta --> <h1></h1>
            Atributo --> <h1 class= "title">

            <ul>
                <li></li>
                <li></li>
                <li></li>
                <li></li>
            </ul>

        No todas las etiquetas tiene apertura y cierre:

        <img src = "cat.jpg" alt= "cat">


//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//
//-----//-----// ¿Qué es HTML semántico? 5/23 //-----//-----//
//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//

HTML SEMANTICO --> Son etiquetas con significado

    - ayudan a tu sitio a ser accesible
    - mejora tu posicion - miento SEQ
    - Codigo mas claro

    SEO (Search Engine Optimization), es decir, Optimización para Motores de Búsqueda
    que aparezcas en Google pues jaja).

    Etiquetas de layout o diseño de la página:

        Las etiquetas más usadas para layout o diseño de página son aquellas que utilizamos
        para construir una página semántica.

            <header>
            <nav>
            <section>
            <article>
            <aside>
            <footer>

//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//
//-----//-----// Etiquetas de HTML más usadas 6/23 //-----//-----//
//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//

    Las etiquetas HTML más usadas son las siguientes, separadas en secciones comunes:

        Header
        Nav
        Section
        Article
        Aside
        Footer
        Form
        Input
        Label
        Button
        H1—H6
        P
        Span
        Img
        Svg
        Ifram
        Video

    1-) Etiquetas de enlace //-----//-----//-----//-----//-----//-----//-----//-----//

        La etiqueta de enlace <a> o “anchor” define un vínculo o enlace hacia una URL.
        Se utiliza con el atributo href con el valor del enlace.

    2-) Etiquetas para textos //-----//-----//-----//-----//-----//-----//-----//-----//
        
        Las etiquetas más usadas para definir textos son:
        
            <h1>, <h2>, <h3>, <h4>, <h5>, <h6>: define diferentes tipos de títulos con diferente
                orden de importancia, donde 1 tiene mayor relevancia.
                Solo debe existir una etiqueta <h1> por página web.

            <p>: define un párrafo.

            <span>: define un contenedor genérico de tipo inline.
                Igual que <div> no tiene valor semántico y debes evitar su uso innecesario.

    3-) Etiquetas para multimedia

            Las etiquetas más usadas para definir elementos multimedia son:

            <img>: define una imagen. Es necesario especificar los atributos src con
                la URL de la imagen; y alt que representa un texto alternativo en caso
                de que la imagen no cargue correctamente.

            <svg>: define un svg.

            <iframe>: define un contenedor para una página web dentro de otra página web.

            <video>: define un contenedor de video.

    4-) Etiquetas para formularios

            Las etiquetas más usadas para definir formularios son:

            <form>: define un formulario.

            <input>: define un elemento de entrada del formulario.
                Es necesario especificar el tipo con el atributo type.
                Existen varios tipos de input, revísalos en su documentación.

            <label>: define un título para la etiqueta <input>.
                Es utilizado para acciones de accesibilidad.

            <button>: define un botón. Es usado para la interactividad de la página.

    5-) Etiquetas para listas

            Las etiquetas más usadas para definir formularios son:

                <ul>: define una lista desordenada. (unordered list)
                
                <ol>: define una lista ordenada. (ordered list)

                <li>: define un elemento dentro de una lista. (list item)

//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//
//-----//-----// Anatomía de una declaración CSS: selectores, propiedades y valores //-----//-----//
//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//

Qué es una declaración de CSS:

    Una declaración de CSS es un bloque que especifica el conjunto de estilos
    que se añadirán a un elemento HTML. Su estructura contiene lo siguiente:

        1-) Selector: define el elemento o conjunto de elementos a los cuales
                se añadirán los estilos.

        2-) Propiedad: es el nombre del estilo de CSS.

        3-) Valor: es el valor que tomará la propiedad.


    Propiedades iniciales de CSS:

        Antes de empezar con CSS utilizaremos algunas propiedades de CSS.

        1-) color: establece el color del texto de un elemento.
        2-) background-color: establece un color de fondo al elemento.
        3-) font-size: establece el tamaño de la fuente.
        4-) width: establece la anchura de un elemento.
        5-) height: establece la altura de un elemento.

    Medidas iniciales:

    Estas son las medidas iniciales que debes conocer para establecer
        tamaños de elementos o de tipografía:

        1-) px: establece una longitud de píxeles.
        2-) %: establece un porcentaje con respecto a una medida base.

//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//
//-----//-----// Tipos de selectores: básicos y combinadores 8/23 //-----//-----//
//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//

    Cuáles son los selectores básicos

        selector {
            Propiedad: Valor;
        }

    Tipos De Selectores:

        Nombre              Ejemplo

        1-) de tipo         div {/* Todos los div en el documento */}
        2-) de clase        .elemento {} o tambien <div class="card"> Soy una carta </div>
        3-) de iD           #id-del-elemento o tambien <button id="eliminar"> Eliminar  </button>
        4-) de atributo     a[href="..."]{...}
        5-) Universal       *{...}


        1-) De tipo div

                Html: div {/* Todos los div en el documento */}

                CSS: div {
                    
                }

        2-) de Clase

                Html: <div class="card"> Soy una carta </div>

                CSS: .elemento {} # Note: elemento = card

        3-) De id

                Html: <button id="eliminar"> Eliminar  </button>

                CSS: #eliminar { /* La única etiqueta con el id "eliminar" */ }

        4-) De atributo

                Html: <a href="https://platzi.com"> Ir a Platzi </a>

                CSS: a[href=""https://platzi.com"] { /* Todas las etiquetas <a> con una propiedad href con valor "https://platzi.com" */ }

        5-) De Universal

            CSS: * { /* Todos los elementos */ }


JERARQIA DE SLECTORES

    NOMBRE                  EXAMPLE:

    DESCENDIENTES           div p
    HIJO DIRECTO            div > p
    ELEMENTO ADYACENTE      div + p
    GENERAL DE HERMANOS     div ~ p 

    Example: 
        div > div {brackgroup: blue;}
    <div>
        <div>
            todo se pina de azul
        </div>
    </div>

//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//
//-----//-----// Tipos de selectores: pseudoclases y pseudoelementos 9/23 //-----//-----//
//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//

                Pseudoclases                pseudoelementos

                :active                     ::after
                :focus                      ::before
                :hover                      ::first-letter
                :nth-child(n)               ::placeholder

1-) Cuáles son las pseudoclases:
        
        Una pseudoclase define el estilo de un estado especial de un elemento.

            1-) :hover --> Representa el estado en el cual el cursor está encima del elemento.

            2-) :active --> Representa el estado de un elemento que no ha sido visitado.

            3-) :visited --> Representa el estado de un elemento que ya ha sido visitado.

            4-) :not() --> Representa el estado en el cual no coinciden los selectores que se indiquen

            5-) :nth-child() --> Representa el estado en el cual coinciden los hijos del elemento según el valor indicado.

        Valores de palabras clave:

            odd: los elementos hijos en posiciones impares.

            even: los elementos hijos en posiciones pares.

2-) Cuáles son los pseudoselementos
    
        Un pseudoelemento define el estilo de una parte específica de un elemento.

            Sintaxis -->

                selector :: pseudo-elemento { 
                    propiedad: valor;
                }

            ::before --> Sirve para agregar un contenido antes del elemento.
                El contenido es agregado mediante la propiedad content de CSS.

            ::after --> Sirve para agregar un contenido después del elemento.
                El contenido es agregado mediante la propiedad content de CSS.

            ::first-letter --> Sirve para añadir estilos a la primera letra del
                texto de cualquier elemento.

    Bibliografia:

        https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements

        https://css-tricks.com/pseudo-class-selectors/

//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//
//-----//-----// Cascada y especificidad en CSS 10/23 //-----//-----//
//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//

    Qué es la cascada en CSS:

        La cascada es el concepto que determina qué estilos se colocan sobre otros, priorizando a aquellos que se encuentren más abajo del código. Recordarás que CSS es la abreviación de Cascade Style Sheets, que traducido es hojas de estilos en Cascada.

    Qué es especificidad en CSS:

        La especificidad consiste en dar un valor a una regla CSS sobre qué tan específico es el estilo, esto para que los navegadores puedan saber qué estilos aplicar sobre otros, independientemente de dónde se encuentren en el código. El estilo se aplicará donde la especificidad sea mayor.

    Tipos de especificidad en CSS:

        Existen 6 tipos de especificidad con su respectivo valor, donde X es la cantidad de estilos que lo contienen. Mira la siguiente imagen

    Valor con mayor especificidad:

        La palabra reservada !important es un valor de toda propiedad CSS que provee una especificidad de 10000, por lo que se aplicará ante otros estilos. Esto es una mala práctica y no deberías utilizarlo.

    Bibliografia:

        - https://specificity.keegan.st/

        - https://htmlcolorcodes.com/

    
    Especificidad -->

        Valoracion  -->     Descripcion

        1,0,0,0,0           !important
        0,1,0,0,0           Estilos En Linea
        0,0,1,0,0           #ID
        0,0,0,1,0           .Clases, atributos y Pseudo clases
        0,0,0,0,1           Elementos
        0,0,0,0,0           Selector Universal

    !important 1, 0, 0, 0, 0

        Reescribe cualquier estilo.
        Para el navegador es de alta prioridad.
        Hay que evitarlo o usarlo con mucha precaución.

    Estilos en línea 0, 1, 0, 0, 0

        Los estilos en línea aplicaran estilos nuevos sobre otros, aunque ya tengan clases o IDs.

    #ID 0, 0, 1, 0, 0

        Los ID tienen mayor peso que las clases y etiquetas.
        Pero al ser únicos es preferible usarlos para funcionalidad que para estilos.

    !important 1, 0, 0, 0, 0

        Reescribe cualquier estilo.
        Para el navegador es de alta prioridad.
        Hay que evitarlo o usarlo con mucha precaución.

    Estilos en línea 0, 1, 0, 0, 0

        Los estilos en línea aplicaran estilos nuevos sobre otros, aunque ya tengan clases o IDs.
    
    #ID 0, 0, 1, 0, 0

        Los ID tienen mayor peso que las clases y etiquetas.
        Pero al ser únicos es preferible usarlos para funcionalidad que para estilos.

    .Clases, atributos y pseudo clases 0, 0, 0, 1, 0

        Es mejor usar clases para dar estilos, combinados con una metodología como BEM tendrás una especificidad manejable.
    
    Elementos 0, 0, 0, 0, 1

        Los estilos aplicados a los elementos son los más básicos y fáciles de reescribir.
    
    Selector Universal 0, 0, 0, 0, 0

        El selector universal no tiene peso alguno y será reescrito por cualquier otra regla.

//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//
Tipos de display más usados: block, inline e inline-block 11/23
//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//

    La propiedad display establece el tipo de visualización de los elementos HTML.
        sin afectar el flujo normal de los elementos.

        1-) blok                por defecto: <div>
        2-) inline              por defecto: <span>
        3-) inline -block       por defecto: <button>
        4-) flex
        5-) grid

    Existen etiquetas que por defecto su display ya está determinado,
        como la etiqueta <div> que tiene display block,
        <span> tiene display inline y <button> tiene display inline-block.

    1-) Visualización en bloque (block)

            El display block **establece que un elemento ocupará todo el espacio disponible por defecto y el siguiente elemento a este se situará por debajo.

            Es posible añadir medidas de anchura width y altura height a estos a elementos.

            También es posible agregar todas las propiedades del modelo de caja (no te preocupes de este concepto, ya lo abordaremos).

    2-) Visualización en línea (inline)

            El display inline establece que un elemento ocupará el espacio del contenido del mismo y el siguiente elemento se situará a la derecha.

            No es posible añadir medidas de anchura width y altura height a estos a elementos.

            También, no es posible agregar todas las propiedades del modelo de caja, únicamente funcionará la propiedad margin en el eje horizontal (no te preocupes de este concepto, ya lo abordaremos).

    3-) Visualización de bloque y línea (inline-block)

            El display inline-block combina las ventajas de bloque de colocar medidas al elemento y propiedades del modelo de caja correctamente; con las ventajas de inline de color un elemento seguido de otro en el mismo espacio.

            Si elemento excede el contenido total, se coloca en la siguiente línea por debajo.

    EXTRA -) Visualización nula (none)

        El display none desactiva la visualización de un elemento, como si el elemento no existiera.

        inline: Estos elementos son los que su caja mide exactamente lo mismo que su contenido.
            Estos elementos los podemos usar en textos y en lugar de que se agreguen en una nueva línea se agregaran justo al ladito del texto. ❗ Tienen como desventaja que no podemos ponerles márgenes ni tampoco podemos cambiar su tamaño.

        block: Estos elementos ocupan toda la pantalla,
            por lo que si quieres agregar otro elemento, este se agregará automáticamente abajo. No importa que tengas poco contenido, el elemento sí o sí va a ocupar toda la pantalla.

        inline-block: Esto mezcla lo mejor de ambos mundos.
            Con este display podemos tener tanto los beneficios de inline como de block, es decir, podemos tener elementos que no ocupen todo el ancho de la pantalla, sino que ocupen solamente lo que su contenido ocupa, pero también vamos a poder darle márgenes y podremos cambiar su tamaño 🤠. 

//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//
Tipos de display más usados: flexbox y CSS grid 12/23
//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//

    Qué es flexbox

        Flexbox consiste en el ordenamiento de elementos hijos en un solo eje, por defecto horizontalmente. El elemento padre o contenedor deberá contener la propiedad display con el valor flex. A partir de aquí, ya puedes ordenar los hijos según sea necesario.

    ué es grid

        Grid consiste en el ordenamiento de elementos hijos en dos ejes, como si fuera una cuadrícula o tabla. El elemento padre o contenedor deberá contener la propiedad display con el valor grid y debes definir las medidas de las columnas y de las filas. A partir de aquí, ya puedes ordenar los hijos según sea necesario.

    Bibliografia:
    
    1-) A Complete Guide to Flexbox:
    
            https://css-tricks.com/snippets/css/a-guide-to-flexbox/

    2-) A Complete Guide to Grid:
            
            https://css-tricks.com/snippets/css/complete-guide-grid/

    3-) Flexbox vs CSS Grid: ¿Cuál es la diferencia?:
    
            https://platzi.com/blog/flexbox-vs-css-grid-cual-es-la-diferencia/

//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//
//-----//-----// Modelo de caja 13/23 //-----//-----//
//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//

    El modelo de caja se compone de cuatro elementos: margin, border, padding y contenido.

    1-) Qué es el contenido del elemento HTML:

        El contenido del elemento, como su nombre lo indica, es todo lo que está dentro del elemento. Este tiene medidas establecidas por las propiedades width y height, que representan la anchura y la altura, respectivamente. Si imaginamos una caja, este valor sería todo lo que decidas colocar dentro.

    2-) Qué son los bordes del elemento HTML:

        El border consiste en el perfil o borde de un elemento HTML. Si imaginamos una caja, sería la caja en sí. Para definir un borde es necesario utilizar las siguientes tres propiedades:

        - border-color: establece el color del borde.

        - border-style: establece el estilo propio del borde, estos pueden ser:
            none (sin borde), dotted (puntos), dashed (guiones), solid (continuo),
            double (doble continuo), groove (recuadro).
            
        - border-width: estable la anchura del borde.
        También se puede establecer los tres valores en una sola propiedad border donde no importa el orden.

    3-) Qué es el espaciado interno del elemento HTML o padding:
    
        El padding consiste en el espacio entre el borde y el contenido del elemento HTML.
        Si imaginamos una caja, este valor sería el espacio entre la caja y lo que deseas guardar.

    4-) Como se compone el modelo de caja:

        Por fuera -->   Margin
        Por linea -->   border
        Por dentro -->  padding
        Por contex -->  contenido

    Bibliografia:

    https://www.joshwcomeau.com/css/rules-of-margin-collapse/

    https://learn-the-web.algonquindesign.ca/topics/flexbox/


//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//
//-----//-----// Colapso de márgenes 14/23 //-----//-----//
//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//

    El colapso de márgenes sucede cuando dos elementos bloque adyacentes tienen un determinado valor de margin, entonces estos márgenes se solapan en un solo valor, el mayor de ambos.

//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//
//-----//-----// Posicionamiento en CSS 15/23 //-----//-----//
//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//

    Que es el posicionamiento:
    
        El posicionamiento en CSS consiste en cómo un elemento se situará, con respecto a su elemento padre y al flujo normal del documento. El flujo normal del documento es el orden de los elementos establecidos en el HTML.

            La posición del elemento se la define con la propiedad position, mediante los siguientes valores:

                static
                relative
                absolute
                sticky

                Otros: Fixed, initial, inherial.

            Propiedades de posición:

                Además de la propiedad position, existen cuatro propiedades del elemento de acuerdo a su posición con respecto a su padre, estas son: top (arriba), bottom (debajo), left (izquierda) y right (derecha).

    Tipos De Posicion
    
        Posición estática

            La posición static es el valor por defecto de todo elemento HTML, consiste en respetar el flujo normal del documento donde las propiedades de posición no pueden ser establecidas.

        Posición relative

            La posición relative consiste en respetar el flujo normal del documento donde las propiedades de posición sí pueden ser establecidas.

        Posición absoluta

            La posición absolute consiste en quitar al elemento del flujo normal del documento donde las propiedades de posición sí pueden ser establecidas.

        Posición fija

            La posición fixed consiste en quitar al elemento del flujo normal del documento y fijarlo en un lugar; donde las propiedades de posición sí pueden ser establecidas.

        Posición variable fija

            La posición sticky consiste en quitar al elemento del flujo normal del documento y fijarlo en un lugar mientras su contenedor sea visible; donde las propiedades de posición sí pueden ser establecidas.

//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//
//-----//-----// Z-index y el contexto de apilamiento 16/23 //-----//-----//
//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//

    El contexto de apilamiento consiste en la superposición de capas o elementos a lo largo del eje Z del navegador. Esto es importante para evitar que un elemento esté ocultando a otro.

    Qué son los planos y ejes:
    
        El navegador está constituido de tres planos y ejes: el ancho o X; el alto o Y; y el de profundidad o Z.

        El eje X positivo está hacia la derecha; el eje Y positivo está hacia abajo; y el eje Z positivo está hacia el usuario.

        Qué es la propiedad z-index
        El contexto de apilamiento se configura con la propiedad z-index.

        Por defecto, todos los elementos tienen un valor auto, es decir, el orden está definido por la estructura del HTML. Los primeros elementos estarán detrás y los últimos estarán de frente.

        Si se establece un valor positivo, este elemento se sitúa por delante de los demás. Si se establece un valor negativo, se sitúa por detrás.

        Si un elemento tiene un z-index mayor a otro, estará por delante. Sin embargo, si un elemento que tiene un z-index menor a otros, sus hijos nunca estarán por encima, aunque su z-index sea mayor.

//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//
//-----//-----// Propiedades y valores de CSS más usados 17/23 //-----//-----//
//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//

    Las propiedades CSS más usadas son las siguientes, separadas en secciones comunes, algunas ya las conocemos:

        Display
        Margin
        Padding
        Border
        Width
        Height
        Color
        Background


        Bibliografia:

            https://cssreference.io/

    Propiedades de textos:
    
        Las propiedades para manipular los textos y tipografía son los siguientes:

        font-size: establece un tamaño de fuente.
        font-weight: establece el resaltado del texto, con valores de 100 a 900 en intervalos 
            de 100; donde 100 es delgada y 900 es negrita.
        font-family: establece el tipo de fuente.
        text-align: establece la posición del texto: right, left, center y justify.
        color: establece el color del texto.

    Bordes redondeados
        
        La propiedad que establece bordes redondeados es: border-radius.

//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//
//-----//-----// Unidades de medida 18/23 //-----//-----//
//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//

    Las unidades de medida establecen una longitud para un determinado elemento o tipografía.
        Existen dos tipos de medidas: absolutas y relativas.

    Qué son las medidas absolutas:

        Las medidas absolutas son valores fijos, por lo que la medida no cambiará. La unidad absoluta más utilizada son los píxeles px, las demás son muy poco utilizadas, pero es bueno que las conozcas.

            Unidad	    Nombre	                    Equivalencia
            
            px	        píxeles	                    1 px = 1/96 in
            cm	        centímetros	                1 cm = 96/2.54 px
            mm	        milímetros	                1 mm = 1/10 cm
            Q	        cuartos de milímetros	    1 Q = 1/4 mm
            in	        pulgadas	                1 in = 2.54 cm = 96 px
            pc	        picas	                    1 pc = 1/6 in
            pt	        puntos	                    1 pt = 1/72 in

    Qué son las medidas relativas.

        Las medidas relativas son valores variables, por lo que la medida depende de un valor externo.
        Se debe tener en cuidado con estas porque un pequeño cambio puede desencadenar tamaños muy elevados.

            Unidad	    Depende de

            em	        el elemento que lo contiene
            rem	        el elemento raíz
            vw	        1% del ancho de la pantalla (view width)
            vh	        1% de la altura de la pantalla (view height)
            vmin	    1% de la dimensión más pequeña de la pantalla
            vman	    1% de la dimensión más grande de la pantalla
            ch	        anchura del caracter “0” del elemento que lo contiene
            lh	        altura de la línea del elemento que lo contiene

    Diferencia entre rem y em:

        La medida em depende del elemento que lo contiene, es decir, si un elemento tiene font-size de 20px, el valor de em es igual a 20px, el valor de 2em será de 40px y así sucesivamente.

        La medida rem depende del elemento raíz, el valor del font-size del elemento raíz es de 16px, por lo tanto, el valor de 2rem es igual a 32px, y así sucesivamente.

    Diferencia entre porcentajes y la anchura y altura de la pantalla:

        Los porcentajes representan el tamaño con respecto al total del elemento padre. Si el elemento padre tiene 20px, entonces el 100% será de 20px.

        Por otra parte, las medidas de anchura vw y altura vh representan el tamaño con respecto al total de la pantalla. Si el elemento tiene un tamaño de 100vw será el 100 por ciento de la pantalla.

        Si un elemento tiene todo el tamaño de la pantalla, entonces solamente en ese punto la medida 100% será igual a 100vw o 100vh.

    Problema con las medidas de texto:

        Los navegadores tienen una opción para cambiar el tamaño del texto. Con medidas absolutas, el tamaño de la letra no cambiará, por lo que será un problema para el usuario.

        Con medidas relativas, el tamaño cambiará con respecto a la fuente del elemento raíz. Por lo que estas son una buena opción para solucionar este problema de accesibilidad, en específico la medida rem.

        Sin embargo, la medida rem equivale a 16px y puede ser confuso mientras utilices valores altos. Por lo que vamos a cambiar el valor del elemento de la raíz para que la medida rem sea igual a 10px.

        En la etiqueta <html> cambia el valor de la propiedad font-size a 62.5%, resultado de una regla de tres: si 16px es igual al 100% entonces cuál será el porcentaje para 10px.

    

//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//
//-----//-----// Responsive Design 19/23 //-----//-----//
//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//

    El diseño responsivo (Responsive Design) consiste en un conjunto de herramientas para que tu sitio se vea bien en varias medidas de pantalla, esto incluye imágenes, tipografía, internacionalización de la página y entre otros.

    En la actualidad, la mayoría de sitios web son visitados desde un celular, por lo que asegurarse que nuestro sitio sea responsivo para cualquier dispositivo es fundamental para optimizar las ganancias.

    Qué son las media queries

        Las media queries son reglas CSS que establecen un comportamiento distinto o diferentes estilos en un cierto rango de la pantalla. Esto sirve para establecer el layout del sitio web para diferentes tipos de pantalla: escritorio, tablets y celulares.

    Estos son dos tipos de media querie :

        max-width / max-height: establece un rango máximo para cierto comportamiento.

        min-width / min-height: establece un rango mínimo para cierto comportamiento.
        
        Note: Estos valores son parecidos a condicionales, mientras se cumpla la condición, aplica determinados estilos.

    Estructura de la media querie:

        La estructura de una media querie consiste en empezar con @media, seguido del tipo de la media querie estableciendo un rango, envolviendo las reglas CSS dentro de ese rango.

    Herramientas del desarrollador para media queries:

        Para observar que los cambios se estén aplicando correctamente, las herramientas de desarrollador serán de gran ayuda.

        Abre las herramientas del navegador y da clic en la opción “Toggle device tool”, aquí podrás manipular la pantalla y observar en cuántos píxeles está ocurriendo determinados estilos.

        Utiliza el siguiente ejemplo para visualizar cómo cambian los estilos según la longitud de la pantalla. Puedes revisar la media querie que está en el código. Aunque solo cambien el color de dos elementos, puede estar cualquier propiedad que desees, prueba con todo.

//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//
//-----//-----// ¿Qué son las arquitecturas CSS? ¿Para qué sirven? 20/23 //-----//-----//
//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//

    Las arquitecturas CSS consisten en manejarel código CSS con una serie de reglas
        y patrones para facilitar su lectura, mantenibilidad y escabilidad.

        El código que has manejado no se asemeja a la realidad, pues deberás manejar varios cientos o miles de líneas de código. Las arquitecturas CSS se encargan de manejar una norma en el código para que cualquiera pueda añadir o quitar funcionalidad sin mucho trabajo.

    Objetivos de las arquitecturas de CSS

        Los objetivos de las arquitecturas de CSS son:

            Ser predecible: el código debe ser lo menos complejo posible.
            Reutilizable: el código debe ser lo menos redundante, para evitar problemas con la especificidad.
            Mantenible: el código debe ser lo más fácil de manejar para añadir o quitar estilos.
            Escalable: el código debe ser capaz de crecer.

    Buenas prácticas de las arquitecturas de CSS:

         Las buenas prácticas de las arquitecturas de CSS son:

            Lineamientos y estándares: definir normas en tu grupo de trabajo de cómo estará escrito el código.

            Documentación: establecer una breve explicación del código y de los lineamientos, esto sirve especialmente para nuevas personas se familiaricen con lo que deben hacer.

            Componentes: establecer de manera componetizada cada uno de los elementos de tu página, es decir, manejarlos por partes para después unirlos en un todo.

    Resumen DEl profesor comment:

    ¿Qué son y para qué nos sirven las arquitecturas CSS?

        Sirven para mantener un orden y una coherencia durante todo el proyecto. Tiene los siguientes objetivos:

            Predecibles: escribir reglas claras.
            Reutilizable: no escribir código redundante.
            Mantenible: que sea fácil de leer y adaptable a los estándares.
            Escalable: que pueda crecer fácilmente sin afectar el rendimiento.
        .
        Estos objetivos se deben ver reflejadas en buenas practicas que debe conocer todo el equipo involucrado en el proyecto como:

            Establecer reglas
            Explicar la estructura base
            Establecer estándares de codificación
            Evitar largas hojas de estilo
            Documentación

//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//
//-----//-----// OOCSS, BEM, SMACSS, ITCSS y Atomic Design 21/23 //-----//-----//
//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//

    Qué es CSS orientado a objetos:

        La arquitectura OOCSS (Object Oriented CSS) consiste en separar la estructura principal y la piel o máscara.

        En otras palabras, consiste en tener objetos que son estructuras principales. Estos objetos estarán unidos en una máscara, donde esta será la que cambie pero manteniendo la estructura intacta.

    Qué es BEM: bloque, elemento y modificador:

        La arquitectura BEM (Block-Element-Modifier) es una de las más utilizadas actualmente. Consiste en manejar los elementos en clases definidas por bloques, elementos y modificadores.

            Bloque: es la estructura principal que es contenedora de varios elementos.
            Elemento: es el elemento HTML que hace referencia el contenedor.
            Modificador: es un estilo específico para el elemento. Por ejemplo, un botón que tenga un color diferente a los demás, esto tiene relación con la especificidad.

    Qué es la arquitectura escalable y modular de CSS:

        La arquitectura SMACSS (Scalable and Modular Architecture for CSS) indica el orden de componentes que estarán ubicados en carpetas. La unión de estos componentes dará como resultado tu página web con estilos.

            Base: elementos base, como botones, títulos, enlaces.
            Layout: estructura de la página, relacionado con el Responsive Design.
            Módulos: elementos que contienen a los elementos base.
            Estado: estilos relacionados con el comportamiento de elemento, relacionado con las pseudoclases y pseudoelementos.
            Temas: conjunto de estilos que definen tu página web.

    Qué es el triángulo invertido de CSS:

        La arquitectura ITCSS (Inverted Triangle CSS) consiste en separar los archivos del proyecto; mediante ajustes, herramientas, elementos, entre otros. Todo esto para manejar los detalles de especificidad, claridad y magnitud.

    Qué es el diseño atómico:

        La arquitectura Atomic Design también es una de las más utilizadas actualmente. Consiste en manejar los elementos como una estructura mínima, a partir de la unión de varias de estas, dará como resultado los estilos de la página web. Se basa en la estructura mínima de la materia, los átomos.

            Átomos: estructura mínima; como botones, enlaces, títulos, entre otros.
            Moléculas: unión de átomos.
            Organismos: unión de moléculas.
            Plantillas: unión de organismos.
            Páginas: unión de plantillas.

//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//
//-----//-----// CSS para entrevistas y mundo laboral 22/23 //-----//-----//
//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//

    No hay una fórmula secreta para pasar cualquier entrevista, cada una varía de acuerdo a la empresa. La mayoría de compañías buscan que domines las tres tecnologías web en conjunto: HTML, CSS y JavaScript.

    Aprende a dominar los conceptos:

        Hay muchos temas para dominar cuando inicias tu camino en frontend developer y los debes entender, no de manera profunda, sino que sepas defenderte.

        No te aprendas de memoria, trata de realizar proyectos, copia alguna interfaz (OJO, solo la interfaz) de alguna página famosa como Netflix, Facebook, e incluso de Platzi 💚.

        Sin embargo, no realices demasiadas copias, debes entender las bases de CSS para seguir con JavaScript lo más rápido posible. Cuando hagas proyectos de JavaScript, también incluirás CSS, por lo que puedes seguir aprendiendo uno mientras repasas el otro.

    El “No” es tu amigo, el “no sé” tu enemigo:

        Cuando te digan “No” en una entrevista, no significa el fin del mundo, míralo como un concepto que te falta un poco repasar, mejora y, a por la siguiente entrevista.

        No digas simplemente “no sé” a algo que desconozcas aún. Entabla una conversación, sé honesto pero muestra tu interés en mejorar. Menciona que no sabes tal tecnología o tal concepto, pero, que lo puedes aprender. Puede que no funcione, pero es mejor a decir un seco “no sé”.

        Todo esto que te menciono tiene relación con tus habilidades blandas (soft skills) que también son igual importantes como tu conocimiento.

//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//
//-----//-----//  //-----//-----//
//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//

//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//
//-----//-----//  //-----//-----//
//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//-----//

